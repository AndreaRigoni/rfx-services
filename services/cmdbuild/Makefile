# Makefile.in generated by automake 1.13.4 from Makefile.am.
# services/cmdbuild/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994-2013 Free Software Foundation, Inc.

# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




am__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'
am__make_running_with_option = \
  case $${target_option-} in \
      ?) ;; \
      *) echo "am__make_running_with_option: internal error: invalid" \
              "target option '$${target_option-}' specified" >&2; \
         exit 1;; \
  esac; \
  has_opt=no; \
  sane_makeflags=$$MAKEFLAGS; \
  if $(am__is_gnu_make); then \
    sane_makeflags=$$MFLAGS; \
  else \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        bs=\\; \
        sane_makeflags=`printf '%s\n' "$$MAKEFLAGS" \
          | sed "s/$$bs$$bs[$$bs $$bs	]*//g"`;; \
    esac; \
  fi; \
  skip_next=no; \
  strip_trailopt () \
  { \
    flg=`printf '%s\n' "$$flg" | sed "s/$$1.*$$//"`; \
  }; \
  for flg in $$sane_makeflags; do \
    test $$skip_next = yes && { skip_next=no; continue; }; \
    case $$flg in \
      *=*|--*) continue;; \
        -*I) strip_trailopt 'I'; skip_next=yes;; \
      -*I?*) strip_trailopt 'I';; \
        -*O) strip_trailopt 'O'; skip_next=yes;; \
      -*O?*) strip_trailopt 'O';; \
        -*l) strip_trailopt 'l'; skip_next=yes;; \
      -*l?*) strip_trailopt 'l';; \
      -[dEDm]) skip_next=yes;; \
      -[JT]) skip_next=yes;; \
    esac; \
    case $$flg in \
      *$$target_option*) has_opt=yes; break;; \
    esac; \
  done; \
  test $$has_opt = yes
am__make_dryrun = (target_option=n; $(am__make_running_with_option))
am__make_keepgoing = (target_option=k; $(am__make_running_with_option))
pkgdatadir = $(datadir)/autoconf-bootstrap
pkgincludedir = $(includedir)/autoconf-bootstrap
pkglibdir = $(libdir)/autoconf-bootstrap
pkglibexecdir = $(libexecdir)/autoconf-bootstrap
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
target_triplet = x86_64-unknown-linux-gnu
DIST_COMMON = $(top_srcdir)/Common.mk \
	$(top_srcdir)/conf/kscripts/build_common.mk \
	$(top_srcdir)/services/docker_services.mk \
	$(srcdir)/Makefile.in $(srcdir)/Makefile.am
#am__append_1 = gnu-make
#am__append_2 = $(IDE_CODE_LOCAL_DIR)
subdir = services/cmdbuild
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/conf/m4/ax_defun_local.m4 \
	$(top_srcdir)/conf/m4/ax_enable_kconfig.m4 \
	$(top_srcdir)/conf/m4/ax_gitignore_list.m4 \
	$(top_srcdir)/conf/m4/ax_target_selfhelp.m4 \
	$(top_srcdir)/conf/m4/m4_ax_valgrind_check.m4 \
	$(top_srcdir)/conf/kscripts/build_common.ac \
	$(top_srcdir)/services/docker_services.ac \
	$(top_srcdir)/services/gitlab/gitlab.ac \
	$(top_srcdir)/services/sharelatex/sharelatex.ac \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
CONFIG_CLEAN_VPATH_FILES =
AM_V_P = $(am__v_P_$(V))
am__v_P_ = $(am__v_P_$(AM_DEFAULT_VERBOSITY))
am__v_P_0 = false
am__v_P_1 = :
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN     " $@;
am__v_GEN_1 = 
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
am__v_at_1 = 
SOURCES =
DIST_SOURCES =
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
am__vpath_adj_setup = srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`;
am__vpath_adj = case $$p in \
    $(srcdir)/*) f=`echo "$$p" | sed "s|^$$srcdirstrip/||"`;; \
    *) f=$$p;; \
  esac;
am__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;
am__install_max = 40
am__nobase_strip_setup = \
  srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*|]/\\\\&/g'`
am__nobase_strip = \
  for p in $$list; do echo "$$p"; done | sed -e "s|$$srcdirstrip/||"
am__nobase_list = $(am__nobase_strip_setup); \
  for p in $$list; do echo "$$p $$p"; done | \
  sed "s| $$srcdirstrip/| |;"' / .*\//!s/ .*/ ./; s,\( .*\)/[^/]*$$,\1,' | \
  $(AWK) 'BEGIN { files["."] = "" } { files[$$2] = files[$$2] " " $$1; \
    if (++n[$$2] == $(am__install_max)) \
      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = "" } } \
    END { for (dir in files) print dir, files[dir] }'
am__base_list = \
  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\n/ /g' | \
  sed '$$!N;$$!N;$$!N;$$!N;s/\n/ /g'
am__uninstall_files_from_dir = { \
  test -z "$$files" \
    || { test ! -d "$$dir" && test ! -f "$$dir" && test ! -r "$$dir"; } \
    || { echo " ( cd '$$dir' && rm -f" $$files ")"; \
         $(am__cd) "$$dir" && rm -f $$files; }; \
  }
am__installdirs = "$(DESTDIR)$(SERVICEdir)" \
	"$(DESTDIR)$(install_servicedir)" \
	"$(DESTDIR)$(install_storedir)"
DATA = $(SERVICE_DATA) $(install_service_DATA) $(install_store_DATA)
am__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) $(LISP)
ACLOCAL = ${SHELL} /mnt/disk1/rfx-services/conf/missing aclocal-1.13
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = $(VERBOSE_LEVEL)
AUTOCONF = ${SHELL} /mnt/disk1/rfx-services/conf/missing autoconf
AUTOHEADER = ${SHELL} /mnt/disk1/rfx-services/conf/missing autoheader
AUTOMAKE = ${SHELL} /mnt/disk1/rfx-services/conf/missing automake-1.13
AWK = gawk
BUILD_CUSTOM_GNUMAKE_DIR = 
BUILD_CUSTOM_GNUMAKE_URL = 
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CODE_SERVER_AUTH = none
CODE_SERVER_HOST = 0.0.0.0
CODE_SERVER_PORT = 8080
CODE_SERVER_URL = https://github.com/cdr/code-server/releases/download/2.1692-vsc1.39.2/code-server2.1692-vsc1.39.2-linux-x86_64.tar.gz
CONFIG_STATUS_DEPENDENCIES = $(top_builddir)/.config
CPPFLAGS = 
CURL = /bin/curl
CXX = g++
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"autoconf-bootstrap\" -DPACKAGE_TARNAME=\"autoconf-bootstrap\" -DPACKAGE_VERSION=\"0.1\" -DPACKAGE_STRING=\"autoconf-bootstrap\ 0.1\" -DPACKAGE_BUGREPORT=\"andrea.rgn@gmail.com\" -DPACKAGE_URL=\"\" -DPACKAGE=\"autoconf-bootstrap\" -DVERSION=\"0.1\"
DEPDIR = .deps
DOCKER_REGISTRY_SERVER_HOST = localhost
DOCKER_REGISTRY_SERVER_PORT = 5000
DOWNLOADS = 
DOWNLOAD_DIR = /mnt/disk1/rfx-services/downloads
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EMAIL_SMTP_IGNORE_TLS = 
EMAIL_SMTP_IGNORE_TLS_TF = 
EMAIL_SMTP_PASS = 
EMAIL_SMTP_SECURE = 
EMAIL_SMTP_SECURE_TF = 
EMAIL_SMTP_TLS_REJECT_UNAUTH = 
EMAIL_SMTP_TLS_REJECT_UNAUTH_TF = 
EMAIL_SMTP_USER = 
EXEEXT = 
GITLAB_DOCKER_IMAGE = 
GITLAB_EXTERNAL_URL = 
GITLAB_PUBLIC_IP = 
GITLAB_PUBLIC_PORTS = 
GITLAB_SSLCERT_FILE_CRT = 
GITLAB_SSLCERT_FILE_KEY = 
IDE = code
IDE_BIN = /bin/code
IDE_CODE_DOWNLOAD_URL = 
IDE_CODE_LOCAL_DIR = 
IDE_CODE_LOCAL_EXTENSIONS_PATH = 
IDE_WSDIR = /mnt/disk1/rfx-services/conf/ide
INSTALL = /bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = 
LN_S = ln -s
LTLIBOBJS = 
MAKEINFO = ${SHELL} /mnt/disk1/rfx-services/conf/missing makeinfo
MAKE_PROCESS = 12
MKDIR_P = /bin/mkdir -p
OBJEXT = o
PACKAGE = autoconf-bootstrap
PACKAGE_BUGREPORT = andrea.rgn@gmail.com
PACKAGE_NAME = autoconf-bootstrap
PACKAGE_STRING = autoconf-bootstrap 0.1
PACKAGE_TARNAME = autoconf-bootstrap
PACKAGE_URL = 
PACKAGE_VERSION = 0.1
PATH_SEPARATOR = :
PERL = perl
SED = /bin/sed
SERVICE_MODULES =  newaccount
SET_MAKE = 
SHARELATEX_COMPOSER_FILE = 
SHARELATEX_DOCKER_IMAGE = 
SHARELATEX_PUBLIC_IP = 
SHARELATEX_PUBLIC_PORTS = 
SHARELATEX_SITE_URL = 
SHARELATEX_SSLCERT_FILE_CRT = 
SHARELATEX_SSLCERT_FILE_KEY = 
SHELL = /bin/sh
SMTP_SERVER_HOST = rfxsmtp.igi.cnr.it
SMTP_SERVER_PORT = 25
STRIP = 
TAR = gtar
UNIQ = uniq
VERBOSE_LEVEL = 0
VERSION = 0.1
WC = wc
abs_builddir = /mnt/disk1/rfx-services/services/cmdbuild
abs_srcdir = /mnt/disk1/rfx-services/services/cmdbuild
abs_top_builddir = /mnt/disk1/rfx-services
abs_top_srcdir = /mnt/disk1/rfx-services
ac_ct_CC = gcc
ac_ct_CXX = g++
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
email_administrator = webmaster@igi.cnr.it
email_notreply = donotreply@igi.cnr.it
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /mnt/disk1/rfx-services/conf/install-sh
kconfig_dir = conf/kconfig
ldap_base = cn=Users,dc=rfxoffline,dc=local
ldap_bind_dn = cn=ldapsearch,cn=Users,dc=rfxoffline,dc=local
ldap_host = ntserv1.rfxoffline.local
ldap_port = 389
ldap_search_password = searchldap
ldap_usernameid = sAMAccountName
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = $(MKDIR_P)
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target = x86_64-unknown-linux-gnu
target_alias = 
target_cpu = x86_64
target_os = linux-gnu
target_vendor = unknown
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
ak__DOWNLOADS = $(DOWNLOADS) $(am__append_1) ak__cdr-code-server

# VERBOSITY VARIABLE that is usable in Makefile if clause
# See Automake AM_V_P for comparison in bash if clauses
AK_V_IF = $(ak__v_IF_$(V))
ak__v_IF_ = $(ak__v_IF_$(AM_DEFAULT_VERBOSITY))
ak__v_IF_0 = mark 
ak__v_IF_1 = 

# A literal space.
ak__empty := 
ak__space := $(ak__empty) $(ak__empty)

# Joins elements of the list in arg 2 with the given separator.
#   1. Element separator.
#   2. The list.
ak__join_with = $(subst $(ak__space),$1,$(strip $2))
dl__tar_ext = %.tar %.tar.gz %.tar.xz %.tar.bz %.tar.bz2
dl__git_ext = git://% %.git
_fname = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
ak__DIRECTORIES = $(DIRECTORIES) $(ATOM_HOME) \
	$(ak__QTCREATOR_SETTINGS_PATH) $(ak__VS_CODE_PATH) \
	$(am__append_2) $(install_tmpdir)
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST) $(ak__DIST_COMMON)
ak__DIST_COMMON = \
                  $(top_srcdir)/bootstrap \
				  $(top_srcdir)/conf/update_submodules.sh \
				  $(top_srcdir)/Kconfig \
				  $(wildcard $(patsubst %.ac,%.kconfig,$(filter %.ac,$(am__aclocal_m4_deps))))

#gnu_make_URL = http://ftp.gnu.org/gnu/make/make-4.1.tar.gz
#gnu_make_DIR = $(BUILD_CUSTOM_GNUMAKE_DIR)
#_ = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
#MAKE = $(BUILD_CUSTOM_GNUMAKE_DIR)/make
edit_DEPS = qws
ak__ATOM_PACKAGES = $(ATOM_PACKAGES) project-manager atom-ide-ui \
	ide-python teletype refactor autocomplete-clang goto build \
	build-make
ATOM_PACKAGES_PATH = $(addprefix $(ATOM_HOME)/packages/,$(ak__ATOM_PACKAGES))

# ////////////////////////////////////////////////////////////////////////////////
# //  QTCREATOR  /////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__QTCREATOR_SETTINGS_PATH = $(or $(QTCREATOR_SETTINGS_PATH),$(abs_top_builddir)/conf/ide)

# ////////////////////////////////////////////////////////////////////////////////
# //  VS CODE  ///////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__VS_CODE_PATH = $(or $(VS_CODE_PATH),$(abs_top_builddir)/conf/ide/vs_code)
ak__VS_CODE_ARGS = $(VS_CODE_ARGS)
ak__VS_CODE_PROJECT_PATH = $(or $(VS_CODE_PROJECT_PATH),$(top_srcdir))
ak__VS_CODE_EXTENSIONS = ms-vscode.cpptools \
							ms-python.python \
							maelvalais.autoconf \
							$(VS_CODE_EXTENSIONS)

#ak__VS_CODE_EXTENSIONS_PATH = --extensions-dir=$(IDE_CODE_LOCAL_EXTENSIONS_PATH)

# ////////////////////////////////////////////////////////////////////////////////
# //  CDR CODE SERVER  ///////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
ak__CODE_SERVER_HOST = $(or $(CODE_SERVER_HOST),0.0.0.0)
ak__CODE_SERVER_PORT = $(or $(CODE_SERVER_PORT),8080)
ak__CODE_SERVER_AUTH = $(or $(CODE_SEVER_AUTH),none)
ak__CODE_SERVER_URL = $(or $(CODE_SERVER_URL),https://github.com/cdr/code-server/releases/download/3.4.1/code-server-3.4.1-linux-x86_64.tar.gz)
ak__cdr_code_server_URL = $(ak__CODE_SERVER_URL)
ak__cdr_code_server_DIR = $(top_builddir)/conf/ide/code-server
NODOCKERBUILD = % ${DOCKER_TARGETS} #this is needed for build with \
	docker
mkfile_path = $(abspath $(lastword $(MAKEFILE_LIST)))
current_dir = $(notdir $(patsubst %/,%,$(dir $(mkfile_path))))
ak__default_value = $(if $($1),,$(eval $1 = $2))

# VENDOR        := $(or $(VENDOR),rfx)
# $(if $(SERVICE),,$(eval SERVICE = $(current_dir)))
# $(if $(SWARM_NAME),,$(eval SWARM_NAME = $(current_dir)))
# $(if $(SERVICE_NAME),,$(eval SERVICE_NAME = $(SWARM_NAME)_$(SERVICE)))
SERVICE_DIR = $(abs_srcdir)
STORE_DIR = $(abs_builddir)
date = $(shell date)
INSTALL_TARGETS = install install-% $(install_service_DATA) $(install_store_DATA)
# INSTALL_TARGETS_VARIABLES = SERVICE SWARM_NAME SERVICE_NAME
# SERVICE_I      = $(VENDOR)-$(SERVICE)
# SWARM_NAME_I   = $(VENDOR)-$(SWARM_NAME)
# SERVICE_NAME_I = $(VENDOR)-$(SERVICE_NAME)

# install-print:
# 	@ echo "$(SERVICE) --> $(install_servicedir), $(SERVICEdir)"
# 	@ echo "SERVICE = $(SERVICE)"
# 	@ echo "SWARM = $(SWARM_NAME)"
# 	@ echo "SERVICE_NAME = $(SERVICE_NAME)"
install_servicedir = $(or $(INSTALL_SERVICE_DIR),$(datadir)/$(VENDOR)-services/$(SERVICE))
install_storedir = $(or $(INSTALL_STORE_DIR),$(datadir)/$(VENDOR)-services/$(SERVICE))
install_tmpdir = .install
install_service_DATA = $(install_tmpdir)/$(notdir $(COMPOSER_FILE)) \
					   $(install_tmpdir)/$(SERVICE_CONFIG_FILE) \
					   $(install_tmpdir)/$(SYSTEMD_SERVICE_FILE)

install_store_DATA = 
MOSTLYCLEANFILES = $(install_service_DATA) $(install_store_DATA)
DSHELL = $(top_srcdir)/c onf/dk.sh ${DSHELL_ARGS}
NO_DOCKER_TARGETS = Makefile $(srcdir)/Makefile.in $(srcdir)/Makefile.am $(top_srcdir)/configure.ac $(ACLOCAL_M4) $(top_srcdir)/configure am--refresh \
                    $(am__aclocal_m4_deps) $(am__configure_deps) $(top_srcdir)/%.mk \
					docker-%

SERVICEdir = $(install_servicedir)
SOTREdir = $(install_storedir)
COMPOSER_FILE = $(srcdir)/docker-compose.yml
REROUTE_IP = 
REROUTE_PORTS = 
DIRS = 
DIRECTORIES = $(DIRS)

# self sign certificates if they don't exist
SSLCERT_FILES = $(SSLCERT_FILE_CRT) $(SSLCERT_FILE_KEY)
SSLCERT_FILE_CRT = $(abs_builddir)/selfsigned_$(HOSTNAME).crt
SSLCERT_FILE_KEY = $(abs_builddir)/selfsigned_$(HOSTNAME).key
SERVICE_DATA = $(DIRS) \
               $(SSLCERT_FILES)

all: all-am

.SUFFIXES:
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am $(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/services/docker_services.mk $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign services/cmdbuild/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --foreign services/cmdbuild/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;
$(top_srcdir)/Common.mk $(top_srcdir)/conf/kscripts/build_common.mk $(top_srcdir)/services/docker_services.mk:

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):

uninstall-SERVICEDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(SERVICE_DATA)'; test -n "$(SERVICEdir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(SERVICEdir)'; $(am__uninstall_files_from_dir)
install-install_serviceDATA: $(install_service_DATA)
	@$(NORMAL_INSTALL)
	@list='$(install_service_DATA)'; test -n "$(install_servicedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(install_servicedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(install_servicedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(install_servicedir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(install_servicedir)" || exit $$?; \
	done

uninstall-install_serviceDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(install_service_DATA)'; test -n "$(install_servicedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(install_servicedir)'; $(am__uninstall_files_from_dir)
install-install_storeDATA: $(install_store_DATA)
	@$(NORMAL_INSTALL)
	@list='$(install_store_DATA)'; test -n "$(install_storedir)" || list=; \
	if test -n "$$list"; then \
	  echo " $(MKDIR_P) '$(DESTDIR)$(install_storedir)'"; \
	  $(MKDIR_P) "$(DESTDIR)$(install_storedir)" || exit 1; \
	fi; \
	for p in $$list; do \
	  if test -f "$$p"; then d=; else d="$(srcdir)/"; fi; \
	  echo "$$d$$p"; \
	done | $(am__base_list) | \
	while read files; do \
	  echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(install_storedir)'"; \
	  $(INSTALL_DATA) $$files "$(DESTDIR)$(install_storedir)" || exit $$?; \
	done

uninstall-install_storeDATA:
	@$(NORMAL_UNINSTALL)
	@list='$(install_store_DATA)'; test -n "$(install_storedir)" || list=; \
	files=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \
	dir='$(DESTDIR)$(install_storedir)'; $(am__uninstall_files_from_dir)
tags TAGS:

ctags CTAGS:

cscope cscopelist:


distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(DATA)
installdirs:
	for dir in "$(DESTDIR)$(SERVICEdir)" "$(DESTDIR)$(install_servicedir)" "$(DESTDIR)$(install_storedir)"; do \
	  test -z "$$dir" || $(MKDIR_P) "$$dir"; \
	done
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic mostlyclean-am

distclean: distclean-am
	-rm -f Makefile
distclean-am: clean-am distclean-generic

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am: install-SERVICEDATA install-install_serviceDATA \
	install-install_storeDATA
	@$(NORMAL_INSTALL)
	$(MAKE) $(AM_MAKEFLAGS) install-data-hook
install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-generic

pdf: pdf-am

pdf-am:

ps-am:

uninstall-am: uninstall-SERVICEDATA uninstall-install_serviceDATA \
	uninstall-install_storeDATA

.MAKE: install-am install-data-am install-strip

.PHONY: all all-am check check-am clean clean-generic cscopelist-am \
	ctags-am distclean distclean-generic distdir dvi dvi-am html \
	html-am info info-am install install-SERVICEDATA install-am \
	install-data install-data-am install-data-hook install-dvi \
	install-dvi-am install-exec install-exec-am install-html \
	install-html-am install-info install-info-am \
	install-install_serviceDATA install-install_storeDATA \
	install-man install-pdf install-pdf-am install-ps \
	install-ps-am install-strip installcheck installcheck-am \
	installdirs maintainer-clean maintainer-clean-generic \
	mostlyclean mostlyclean-generic pdf pdf-am ps ps-am tags-am \
	uninstall uninstall-SERVICEDATA uninstall-am \
	uninstall-install_serviceDATA uninstall-install_storeDATA


MAKE_PROCESS  ?= $(shell grep -c ^processor /proc/cpuinfo)
DOWNLOAD_DIR  ?= $(top_builddir)/downloads
DOWNLOADS     ?= $(ak__DOWNLOADS)

# PERL ENV SUBST
# --------------
# This can be used to make a sh substitution template by calling $(call __ax_pl_envsubst, template, target)
#
# __ax_pl_envsubst ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg' < $1 > $2
__ax_pl_envsubst  ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2
__ax_pl_envsubst2 ?= $(PERL) -pe 's/([^\\]|^)\$$\(([a-zA-Z_][a-zA-Z_0-9]*)\)/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2

# $(ak__ENVPARSEFILES):
# 	@ $(call __ax_pl_envsubst2,$<,$@);

# FILTER ALL REPETITIONS IN A LIST
# --------------------------------
ak__uniq ?= $(if $1,$(firstword $1) $(call ak__uniq,$(filter-out $(firstword $1),$1)))

# FLAT NAME SUBST
# ---------------
ak__flt ?= $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))

define dl__download_tar
 $(info "Downloading tar file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR} $2; \
 _tar=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_tar || curl -SL $1 > $$_tar; \
 _wcl=$$(tar -tf $$_tar | sed -e 's|/.*||' | uniq | wc -l); \
 if test $$_wcl = 1; then \
  tar -xf $$_tar -C $2 --strip 1; \
 else \
  tar -xf $$_tar -C $2; \
 fi
endef

define dl__download_git
 $(info "Downloading git repo: $1") \
 git clone $1 $2 $(if $3,-b $3)
endef

define dl__download_generic
 $(info "Downloading file: $1") \
 $(MKDIR_P) ${DOWNLOAD_DIR}; \
 _f=${DOWNLOAD_DIR}/$$(echo $1 | sed -e 's|.*/||'); \
 test -f $$_f || curl -SL $1 > $$_f; \
 $(LN_S) $$_f $2;
endef

define dl__dir =
$(if $(${_fname}_DIR),
$(${_fname}_DIR): $$(${_fname}_DEPS)
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$1 DOWNLOAD_DIR=$(DOWNLOAD_DIR)
)
endef
$(foreach x,$(ak__DOWNLOADS),$(eval $(call dl__dir,$x)))

# $(ak__DOWNLOADS): _flt = $(subst -,_,$(subst ' ',_,$(subst .,_,$1)))
$(ak__DOWNLOADS): 
	@ $(MAKE) $(AM_MAKEFLAGS) download NAME=$@ DOWNLOAD_DIR=$(DOWNLOAD_DIR)

.PHONY: download
download: ##@@miscellaneous download target in $NAME and $DOWNLOAD_URL
download: FNAME   = $(subst -,_,$(subst ' ',_,$(subst .,_,$(NAME))))
download: URL     = $(or $($(FNAME)_URL),$(DOWNLOAD_URL))
download: DIR     = $(or $($(FNAME)_DIR),$(NAME))
download: BRANCH  = $(or $($(FNAME)_BRANCH),$(BRANCH))
download: $(or $($(FNAME)_DEPS), $(DOWNLOAD_DEPS))
	@ $(foreach x,$(URL), $(info DOWNLOAD_DIR = $(DOWNLOAD_DIR))\
		$(info Download: $x to $(DIR)) \
		$(if $(filter $(dl__tar_ext),$x),$(call dl__download_tar,$x,$(DIR)), \
		$(if $(filter $(dl__git_ext),$x),$(call dl__download_git,$x,$(DIR),$(BRANCH)), \
		$(call dl__download_generic,$x,$(DIR)) ) ) \
	   )
$(ak__DIRECTORIES):
	@ $(info buildinf dir for: $@) $(MKDIR_P) $@

#  USAGE: to install name as a whole directory add the following target:
#
#  install-<name>DATA:
# 	 @ $(MAKE) ak__$@
#
ak__install-%DATA:
	@$(NORMAL_INSTALL)
	@list='$($*_DATA)'; test -n "$($*dir)" || list=; \
	 if test -n "$$list"; then \
	   echo " $(MKDIR_P) '$(DESTDIR)$($*dir)'"; \
	   $(MKDIR_P) "$(DESTDIR)$($*dir)" || exit 1; \
	 fi; \
	 for p in $$list; do \
	   if test -f "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -f "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read files; do \
	   echo " $(INSTALL_DATA) $$files '$(DESTDIR)$($*dir)'"; \
	   $(INSTALL_DATA) $$files "$(DESTDIR)$($*dir)" || exit $$?; \
	 done; \
	 for p in $$list; do \
	   if test -d "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -d "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read drs; do \
	 	echo "copy directory: $$drs to $(DESTDIR)$($*dir)"; \
	 	cp -au $$drs "$(DESTDIR)$($*dir)"; \
	 done

#$(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile: | gnu-make
#	@ cd $(dir $@) && ./configure

#$(BUILD_CUSTOM_GNUMAKE_DIR)/make: MAKE = make
#$(BUILD_CUSTOM_GNUMAKE_DIR)/make: $(BUILD_CUSTOM_GNUMAKE_DIR)/Makefile
#	@ make -C $(dir $@) all

IDE ?= code
edit: ##@miscellaneous start editor define in $IDE
edit: $(edit_DEPS) edit-$(IDE)

# ////////////////////////////////////////////////////////////////////////////////
# //  ATOM  //////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////

ATOM_HOME         ?= $(abs_top_builddir)/conf/ide/atom
ATOM_PROJECT_PATH ?= $(top_srcdir) $(builddir)

#ak__PYTHON_PACKAGES += setuptools python-language-server[all]

export ATOM_HOME
$(ATOM_PACKAGES_PATH):
	@ apm install $(notdir $@)

apm-list: ##@@atom apm list packages in $ATOM_HOME
apm-%: | $(ATOM_HOME)
	@ apm $*

apm-install: ##@@atom apm install packages in $ATOM_HOME
apm-install: $(ATOM_PACKAGES_PATH)
edit-atom: ##@@ide start atom
edit-atom: | apm-install
	@ atom $(foreach d,$(ATOM_PROJECT_PATH),-a $d )

# ////////////////////////////////////////////////////////////////////////////////
# //  EMACS  /////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////

edit-emacs: ##@@ide start emacs
edit-emacs:
	@ emacs $(srcdir)
QTCREATOR_THEME ?= dark
QTCREATOR_COLOR ?= Inkpot
edit-qtcreator: ##@@ide start qtcreator
edit-qtcreator: | $(ak__QTCREATOR_SETTINGS_PATH)
	@ qtcreator -settingspath $(ak__QTCREATOR_SETTINGS_PATH) \
					-theme $(QTCREATOR_THEME) -color $(QTCREATOR_COLOR)

# ////////////////////////////////////////////////////////////////////////////////
# //  QWS  ///////////////////////////////////////////////////////////////////////
# ////////////////////////////////////////////////////////////////////////////////
#
%.qws: %.template.qws
	 @ $(call __ax_pl_envsubst,$<,$@);

qws: QWS_FILES_TEMPLATES = $(shell find $(top_srcdir)/conf/ide/QtProject/qtcreator/ -name '*.qws.template' 3>/dev/null)
qws: QWS_FILES = $(QWS_FILES_TEMPLATES:.qws.template=.qws)
qws: abs_top_srcdir := $(abs_top_srcdir)
qws: $(QWS_FILES)

#edit-code: ##@@ide start visual studio code editor
#edit-code: ##@@vs_code start visual studio code editor
#edit-code-ext: ##@@vs_code list visual studio extensions
#edit-code-extinstall: ##@@vs_code install all visual studio extensions in $IDE_CODE_EXTENSIONS
#$(IDE_CODE_LOCAL_DIR)/bin/code: | $(DOWNLOAD_DIR) $(IDE_CODE_LOCAL_DIR) 
#	- curl -SL $(IDE_CODE_DOWNLOAD_URL) > $(DOWNLOAD_DIR)/vs_code_local.tar.gz; \
#	$(call dl__download_tar,$(DOWNLOAD_DIR)/vs_code_local.tar.gz,$(IDE_CODE_LOCAL_DIR)); \
#	[ -f $@          ] && patch $@ < $(kconfig_dir)/patch/vs_code_libxcb.patch; \
#	[ -f $@-insiders ] && patch $@-insiders < $(kconfig_dir)/patch/vs_code_insiders_libxcb.patch; \
#	[ -f $@-insiders ] && ln -s $@-insiders $@; 

#edit-code: $(IDE_CODE_LOCAL_DIR)/bin/code
#	$(IDE_CODE_LOCAL_DIR)/bin/code \
#	 -n $(ak__VS_CODE_PROJECT_PATH)  --user-data-dir $(ak__VS_CODE_PATH) \
#	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) 

#edit-code-ext: $(IDE_CODE_LOCAL_DIR)/bin/code
#	@ $(IDE_CODE_LOCAL_DIR)/bin/code --user-data-dir $(ak__VS_CODE_PATH) \
#	  $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) --list-extensions

#edit-code-extinstall: $(IDE_CODE_LOCAL_DIR)/bin/code
#	@ $(foreach x,$(ak__VS_CODE_EXTENSIONS),$(IDE_CODE_LOCAL_DIR)/bin/code \
#	  --user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_ARGS) \
#	  $(ak__VS_CODE_EXTENSIONS_PATH) --install-extension $x;)

edit-code: ##@@ide start visual studio code editor
edit-code: ##@@vs_code start visual studio code editor
edit-code-ext: ##@@vs_code list visual studio extensions
edit-code-extinstall: ##@@vs_code install all visual studio extensions in $IDE_CODE_EXTENSIONS
edit-code: | $(ak__VS_CODE_PATH)
	@ code -n $(ak__VS_CODE_PROJECT_PATH)  --user-data-dir $(ak__VS_CODE_PATH) \
	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) \
	 --enable-proposed-api ms-vscode-remote.remote-ssh

edit-code-ext:
	@ code --user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) \
	 $(ak__VS_CODE_ARGS) --list-extensions

edit-code-extinstall:
	@ $(foreach x,$(ak__VS_CODE_EXTENSIONS),code --user-data-dir $(ak__VS_CODE_PATH) \
	 $(ak__VS_CODE_EXTENSIONS_PATH) $(ak__VS_CODE_ARGS) --install-extension $x;)
ak__cdr-code-server: 

edit-code-server: ##@@ide start cdr vs code server installed in conf/code-server
edit-code-server: ak__cdr-code-server
	$(ak__cdr_code_server_DIR)/code-server --host $(ak__CODE_SERVER_HOST) --port $(ak__CODE_SERVER_PORT) --auth $(ak__CODE_SERVER_AUTH) \
	--user-data-dir $(ak__VS_CODE_PATH) $(ak__VS_CODE_EXTENSIONS_PATH) $(top_srcdir)

# /////////////////////////////////////////////////////////////////////////////
# // RECONFIGURE  /////////////////////////////////////////////////////////////
# /////////////////////////////////////////////////////////////////////////////

.PHONY: reconfigure
reconfigure: ##@miscellaneous re-run configure with last passed arguments
	@ \
	$(info \n\n -- Reconfiguring build directory: -----------") \
	cd '$(abs_top_builddir)' && ./config.status --recheck

shell: ##@miscellaneous start a $(SHELL) using make context
shell:
	$(SHELL)

print-env-: ##@@miscellaneous print-env-% print env variable
print-env-%:
	@ $(if $($*),$(info $*="$($*)"),$(info $* not set)):;

# include $(top_srcdir)/conf/kscripts/docker.mk

SH_GREEN  ?= $(shell tput -Txterm setaf 2)
SH_WHITE  ?= $(shell tput -Txterm setaf 7)
SH_YELLOW ?= $(shell tput -Txterm setaf 3)
SH_RESET  ?= $(shell tput -Txterm sgr0)

HELP_DESCRIPTION ?= Documented targets follow

ifndef SELFHELP_FUNC
SELFHELP_FUNC = \
    %help; \
    %help_var; \
    while(<>) { \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); } \
	if(/^\#@(\w+)?\s?(\w+)?\s*(.*)$$/) { \
	    push(@{$$help_var{$$1}}, [$$2, $$3]); } \
    }; \
    print "\n"; \
    print "| ${HELP_DESCRIPTION}\n"; \
    print "| \n"; \
    print "| ${SH_GREEN}usage: make target${SH_RESET}\n"; \
    print "| \n"; \
    for ( sort keys %help ) { \
	print "| ${SH_YELLOW}$$_${SH_RESET}:\n"; \
	printf("|   %-40s %-80s\n", $$_->[0], $$_->[1]) for @{$$help{$$_}}; \
	print "| \n"; \
    printf("|   env: %-35s %-80s\n", $$_->[0], $$_->[1]) for @{$$help_var{$$_}}; \
	print "| \n"; \
    } \
    print "\n";

SELFHELP_ADVANCED_FUNC = \
    %help; \
    %help_var; \
    while(<>) { \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); } \
	if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@@(\w+))?\s(.*)$$/) { \
	    push(@{$$help{$$2}}, [$$1, $$3]); } \
	if(/^\#@(\w+)?\s?(\w+)?\s*(.*)$$/) { \
	    push(@{$$help_var{$$1}}, [$$2, $$3]); } \
	if(/^\#@@(\w+)?\s?(\w+)?\s*(.*)$$/) { \
	    push(@{$$help_var{$$1}}, [$$2, $$3]); } \
    }; \
    print "\n"; \
	print ", ${SH_GREEN}ADVANCED TARGETS ${SH_RESET}\n"; \
	print "| \n"; \
	for ( sort keys %help ) { \
	print "| ${SH_YELLOW}$$_${SH_RESET}:\n"; \
	printf("|   %-40s %-80s\n", $$_->[0], $$_->[1]) for @{$$help{$$_}}; \
	print "| \n"; \
    printf("|   env: %-35s %-80s\n", $$_->[0], $$_->[1]) for @{$$help_var{$$_}}; \
	print "| \n"; \
	} \
    print "\n";

SELFHELP_PRINT_TARGET_LIST_FUNC = \
    %help; \
    while(<>) { \
    if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@(\w+))?\s(.*)$$/) { \
    	push(@{$$help{$$2}}, [$$1, $$3]); } \
    if(/^([a-zA-Z0-9_\-\.]+):.*\#\#(?:@@(\w+))?\s(.*)$$/) { \
    	push(@{$$help{$$2}}, [$$1, $$3]); } \
    }; \
    for ( sort keys %help ) { \
    printf("%s ", $$_->[0]) for @{$$help{$$_}}; \
    } \

SELFHELP_TARGETS = $(shell perl -e '$(SELFHELP_PRINT_TARGET_LIST_FUNC)' $(MAKEFILE_LIST))

help:         ##@miscellaneous Show this help.
help-more:    ##@miscellaneous get help on advanced targets.
help-targets: ##@@miscellaneous get list of target with help signature

help-targets:
	@ $(info $(SELFHELP_TARGETS)):;

help:
	@perl -e '$(SELFHELP_FUNC)' $(MAKEFILE_LIST)

help-more:
	@perl -e '$(SELFHELP_ADVANCED_FUNC)' $(MAKEFILE_LIST)

endif

dumpvar-: ##@@miscellaneous dump variable (debug purpose)
dumpvar-%:
	@ $(info Makefile variable $* = $($*)) :;

DL   ?= $(DOWNLOAD_DIR)
TMP  ?= $(abs_top_builddir)

${DL} ${TMP}:
	@$(MKDIR_P) $@

.PHONY: reconfigure
reconfigure: ##@miscellaneous re-run configure with last passed arguments
	@ \
	  echo " -- Reconfiguring build with following parameters: -----------"; \
	  echo $(shell $(abs_top_builddir)/config.status --config);              \
	  echo " -------------------------------------------------------------"; \
	  echo ; \
	  cd '$(abs_top_builddir)' && \
	  env -i TERM=$(TERM) $(SHELL) -l -c \
	  "$(abs_top_srcdir)/configure $(shell $(abs_top_builddir)/config.status --config)";

$(call ak__default_value,VENDOR,rfx)
$(call ak__default_value,SERVICE,$(current_dir))
$(call ak__default_value,SWARM_NAME,$(current_dir))
$(call ak__default_value,SERVICE_NAME,$(SWARM_NAME)_$(SERVICE))

export srcdir
export builddir
export top_srcdir
export top_builddir
export abs_top_srcdir
export abs_top_builddir

export  SWARM_NAME \
		SERVICE \
		SERVICE_NAME \
		STORE_DIR \
		SERVICE_DIR \
		SERVICE_EXPORTS \
		REROUTE_IP \
    	REROUTE_PORTS \
    	COMPOSER_FILE \
		DOCKER_IMAGE \
		date

export SMTP_SERVER_HOST  \
       SMTP_SERVER_PORT  \
	   EMAIL_SMTP_SECURE \
	   EMAIL_SMTP_USER   \
	   EMAIL_SMTP_PASS   \
	   EMAIL_SMTP_TLS_REJECT_UNAUTH \
	   EMAIL_SMTP_TLS_REJECT_UNAUTH_TF \
	   EMAIL_SMTP_IGNORE_TLS \
	   EMAIL_SMTP_IGNORE_TLS_TF \
			 email_notreply \
			 email_administrator \
			 ldap_host \
			 ldap_port \
			 ldap_usernameid \
			 ldap_bind_dn \
			 ldap_search_password \
			 ldap_encription \
			 ldap_base

.PHONY: swarm-init swarm-leave start stop ps logs shell

swarm-init: ##@docker initialize this machine as a swarm manager
swarm-init:
	@ $(info swarm init) \
	  docker swarm init  2> /dev/null ||:

swarm-leave: ##@docker swarm leave
swarm-leave:
	@ $(info swarm leave) \
	  docker swarm leave --force ||:

start: ##@docker_services stack deploy service
start: | swarm-init start-local $(COMPOSER_FILE)
	@ $(info stack deploy for service) \
	  docker stack deploy -c $(COMPOSER_FILE) $(SWARM_NAME); \
      $(MAKE) reroute

stop: ##@docker_services remove service
stop: | stop-local
	@ $(info remove current service) \
	  docker stack rm $(SWARM_NAME); \
      $(MAKE) reroute-clear

ps: ##@docker_services list services
ps:
	@ $(info list process in current service) \
	  docker service ps $(SERVICE_NAME)

logs: ##@docker_services see logs
logs:
	@ $(info loking service logs) \
	  docker service logs $(SERVICE_NAME) -f

shell: ##@docker_services enter instance shell
shell:
	@ $(info login into $(SERVICE_NAME).$(or $(ID),1)) \
	  _id=`docker service ps $(SERVICE_NAME) -q`; \
	  docker exec -ti $(SERVICE_NAME).$(or $(ID),1).$${_id} $(SHELL)

compose-up:   ##@@docker_composer local command up
compose-down: ##@@docker_composer local command down
compose-logs: ##@@docker_composer local command logs
compose-up:
	@ docker-compose -f ${COMPOSER_FILE} up -d $(SERVICE)
compose-logs:
	@ docker-compose -f ${COMPOSER_FILE} logs -f $(SERVICE)
compose-down:
	@ docker-compose -f ${COMPOSER_FILE} down

portainer-init: ##@docker_services poirtainer init (browse localhost:9000 then)
portainer-init:
	@ docker volume create portainer_data; \
      docker run -d -p 9000:9000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer

docker-registry-init: ##@docker_services registry init (provide an image registry at localhost:5000)
docker-registry-init:
	@ docker service create --name registry --publish 5000:5000 registry:2

reroute: $(abs_top_srcdir)/services/service_reroute.sh
	@ sudo -E $^ -s $(SERVICE_NAME) reroute_ports ||:

reroute-clear: $(abs_top_srcdir)/services/service_reroute.sh
	@ sudo -E $^ -s $(SERVICE_NAME) clear_ports ||:

install-data-hook::
	- $(MAKE) -C $(top_builddir)/services/ install SUBDIRS="" # install service utils
	- systemctl link -f $(SERVICE_DIR)/$(SYSTEMD_SERVICE_FILE); \
	  systemctl daemon-reload

__ax_pl_envsubst  ?= $(PERL) -pe 's/([^\\]|^)\$$\{([a-zA-Z_][a-zA-Z_0-9]*)\}/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2
__ax_pl_envsubst2 ?= $(PERL) -pe 's/([^\\]|^)\$$\(([a-zA-Z_][a-zA-Z_0-9]*)\)/$$1.$$ENV{$$2}/eg;s/\\\$$/\$$/g;' < $1 > $2

export datadir
export SERVICE_CONFIG_FILE   = $(SERVICE).conf
export SYSTEMD_SERVICE_FILE  = $(VENDOR)-$(SERVICE).service

# $(foreach v,$(INSTALL_TARGETS_VARIABLES),$(eval $(INSTALL_TARGETS): $v := $($v_I)))
$(INSTALL_TARGETS): SERVICE_DIR   := $(install_servicedir)
$(INSTALL_TARGETS): STORE_DIR     := $(install_storedir)
$(INSTALL_TARGETS): COMPOSER_FILE := $(install_servicedir)/$(notdir $(COMPOSER_FILE))

$(install_tmpdir)/$(SERVICE_CONFIG_FILE): $(abs_top_srcdir)/services/service.config.template | $(install_tmpdir)
	@ $(call __ax_pl_envsubst2,$<,$@);

$(install_tmpdir)/$(SYSTEMD_SERVICE_FILE): $(abs_top_srcdir)/services/systemd.service.template | $(install_tmpdir)
	@ $(call __ax_pl_envsubst2,$<,$@);

$(COMPOSER_FILE): $(wildcard $(srcdir)/$(COMPOSER_FILE).in)
	@ $(if $<,$(call __ax_pl_envsubst2,$<,$@),$(error missing $(srcdir)/$(COMPOSER_FILE).in));

$(install_tmpdir)/$(notdir $(COMPOSER_FILE)): $(wildcard $(srcdir)/$(COMPOSER_FILE).in) | $(install_tmpdir)
	@ $(if $<,$(call __ax_pl_envsubst2,$<,$@),cp $(srcdir)/$(@F) $@); ## if composer_file.in exists parse it

all-am: Makefile $(DATA) $(COMPOSER_FILE)

install: clean install-am

export DOCKER_CONTAINER
export DOCKER_IMAGE
export DOCKER_URL
export DOCKER_DOCKERFILE
export DOCKER_SHELL = /bin/sh
export DOCKER_REGISTRY

# DSHELL_ARGS = -v
$(DOCKER_TARGETS): override SHELL = $(DSHELL)
$(NO_DOCKER_TARGETS): override SHELL = /bin/sh
$(NO_DOCKER_TARGETS): override HAVE_DOCKER = no

docker-clean: ##@@docker_target clean docker container conf in .docker directory
docker-start: ##@@docker_target start advanced per target docker container
docker-stop:  ##@@docker_target stop advanced per target docker container
docker-:      ##@@docker_target advanced per target docker (any command passed to conf/dk.sh)
docker-%:
	@ $(info [docker] $*)
	@ . $(DSHELL) $*

install-SERVICEDATA:
	@ $(MAKE) dk__$@

dk__install-SERVICEDATA:
	@$(NORMAL_INSTALL)
	@list='$(SERVICE_DATA)'; test -n "$(SERVICEdir)" || list=; \
	 if test -n "$$list"; then \
	   echo " $(MKDIR_P) '$(DESTDIR)$(SERVICEdir)'"; \
	   $(MKDIR_P) "$(DESTDIR)$(SERVICEdir)" || exit 1; \
	 fi; \
	 for p in $$list; do \
	   if test -f "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -f "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read files; do \
	   echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(SERVICEdir)'"; \
	   $(INSTALL_DATA) $$files "$(DESTDIR)$(SERVICEdir)" || exit $$?; \
	 done; \
	 for p in $$list; do \
	   if test -d "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -d "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read drs; do \
	 	echo "copy directory: $$drs to $(DESTDIR)$(SERVICEdir)"; \
	 	cp -an $$drs "$(DESTDIR)$(SERVICEdir)"; \
	 done

install-STOREDATA:
	@ $(MAKE) dk__$@

dk__install-STOREDATA:
	@$(NORMAL_INSTALL)
	@list='$(STORE_DATA)'; test -n "$(STOREdir)" || list=; \
	 if test -n "$$list"; then \
	   echo " $(MKDIR_P) '$(DESTDIR)$(STOREdir)'"; \
	   $(MKDIR_P) "$(DESTDIR)$(STOREdir)" || exit 1; \
	 fi; \
	 for p in $$list; do \
	   if test -f "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -f "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read files; do \
	   echo " $(INSTALL_DATA) $$files '$(DESTDIR)$(STOREdir)'"; \
	   $(INSTALL_DATA) $$files "$(DESTDIR)$(STOREdir)" || exit $$?; \
	 done; \
	 for p in $$list; do \
	   if test -d "$$p"; then echo "$$p"; \
	   else p="$(srcdir)/$$p"; \
	    if test -d "$$p"; then echo "$$p"; fi; \
	   fi; \
	 done | $(am__base_list) | \
	 while read drs; do \
	 	echo "copy directory: $$drs to $(DESTDIR)$(STOREdir)"; \
	 	cp -an $$drs "$(DESTDIR)$(STOREdir)"; \
	 done

export HOSTNAME \
       REROUTE_IP \
       REROUTE_PORTS \
       SSLCERT_FILE_CRT \
       SSLCERT_FILE_KEY 

start-local: ${SSLCERT_FILE} | $(DIRS)
stop-local:

image:##@service build image
image:
	docker build $(srcdir)/docker/ -t cmdbuild:r2u-2.0-3.2.1

ssl_cert: ##@gitlab generate selfsigned certificate for ${HOSTNAME}
ssl_cert: $(SSLCERT_FILES)

${SSLCERT_FILES}:
	@ $(info generating cert for $@) \
	  . $(srcdir)/gencert.sh $(basename $(notdir $@)) $(dir $@)

define SERVICE_EXPORTS = 
export SSLCERT_FILE_CRT=$(SSLCERT_FILE_CRT)
export SSLCERT_FILE_KEY=$(SSLCERT_FILE_KEY)
endef

$(INSTALL_TARGETS): SSLCERT_FILE_CRT := $(SERVICE_DIR)/$(notdir $(SSLCERT_FILE_CRT))
$(INSTALL_TARGETS): SSLCERT_FILE_KEY := $(SERVICE_DIR)/$(notdir $(SSLCERT_FILE_KEY))

# CLEANFILES = selfsigned_* 

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
